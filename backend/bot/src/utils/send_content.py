import logging
from pathlib import Path

from aiogram.types import FSInputFile

from keyboards import create_navigation_buttons
from utils.texts import TEXTS

logger = logging.getLogger(__name__)


async def send_content_to_user(message, content: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.

    –ü–∞—Ä–º–∞—Ç–µ—Ç—Ä—ã:
        content: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    """
    content_path = content.get('server_path', '')
    content_type = content.get('type', 0)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if content_path.startswith(('http://', 'https://')):
        # –ï—Å–ª–∏ URL - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await message.answer(
            f'{TEXTS["get_content"]}'
            f'{content_path}\n\n'
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏—à–∞–º–∏
        await message.answer(
            TEXTS['navigation_hint'],
            reply_markup=create_navigation_buttons()
        )
    elif content_path.startswith('uploaded_content/'):
        # –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        await send_local_file(
            message,
            content_path,
            content_type,
            content.get('name', '–§–∞–π–ª')
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏—à–∞–º–∏
        await message.answer(
            TEXTS['navigation_hint'],
            reply_markup=create_navigation_buttons()
            )
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å
        logger.error(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {content_path}')
        await message.answer(TEXTS['content_not_found'])


async def send_local_file(
        message, file_path: str, content_type: int, name: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ü–∞—Ä–º–∞—Ç–µ—Ç—Ä—ã:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        content_type: –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (1 - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, 2 - –≤–∏–¥–µ–æ, 3 - –¥–æ–∫—É–º–µ–Ω—Ç)
        name: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    """
    path = Path(file_path)

    if not path.exists():
        logger.error(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}')
        await message.answer(TEXTS['content_not_found'])
        return

    file_input = FSInputFile(path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if content_type == 1:
        await message.answer_photo(
            photo=file_input,
            caption=f"üñº {name}"
        )
    elif content_type == 2:
        await message.answer_video(
            video=file_input,
            caption=f"üé¨ {name}"
        )
    elif content_type == 3:
        await message.answer_document(
            document=file_input,
            caption=f"üìÑ {name}"
        )
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await message.answer_document(
            document=file_input,
            caption=f"üìé {name}"
        )
