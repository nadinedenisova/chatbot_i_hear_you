services:
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/site.conf:/etc/nginx/conf.d/site.conf:ro
      - app_build:/data
    ports:
      - "80:80"
    depends_on:
      - admin
      - app

  admin-postgres-db:
    image: postgres:latest
    container_name: admin-postgres-db
    restart: always
    volumes:
      - admin_postgres_db_data:/var/lib/postgresql/data
      - ./backend/database.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  admin:
    build: ./backend/admin
    container_name: admin
    env_file:
      - ./.env
    expose:
      - "8000"
    volumes:
      - ./backend/uploaded_content:/opt/admin/src/uploads
    environment:
      - PYTHONUNBUFFERED=1
      - FASTAPI_RELOAD=1
    depends_on:
      admin-postgres-db:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./backend/admin/src
          target: /opt/admin/src

  # admin-tests:
  #   build:
  #     context: ./backend/admin
  #     dockerfile: Dockerfile tests
  #   container_name: admin-tests
  #   env_file:
  #     - ./.env
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #   depends_on:
  #     admin-postgres-db:
  #       condition: service_healthy
  #   develop:
  #     watch:
  #       - action: sync+restart
  #         path: ./backend/admin/src
  #         target: /opt/admin/src

  bot:
    build: ./backend/bot
    container_name: bot
    env_file:
      - ./.env
    volumes:
      - ./backend/uploaded_content:/opt/bot/uploads
    environment:
      - PYTHONUNBUFFERED=1
    develop:
      watch:
        - action: sync+restart
          path: ./backend/bot/src
          target: /opt/bot/src

  app:
    build: ./frontend
    container_name: app
    env_file:
      - ./.env
    volumes:
      - app_build:/opt/app/dist

volumes:
  admin_postgres_db_data:
  app_build:
